pipeline {
  agent {
    kubernetes {
      // make sure this matches the 'Name' of your Kubernetes cloud in Jenkins Config
      cloud 'kubernetes' 

      // this label ties your pipeline to this exact pod template
      label 'nodejs-docker'

      // defaultContainer is where 'sh' will run unless you wrap in container('docker')
      defaultContainer 'node'

      // the actual pod spec, with both nodejs and docker side-by-side
      yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins-stack            # your SA must have rights to create pods
  containers:
  - name: node
    image: node:20-alpine
    command: ['cat']
    tty: true

  - name: docker
    image: docker:20.10.7
    command: ['sleep']
    args: ['infinity']
    tty: true
    securityContext:
      privileged: true                   # needed for mounting the docker socket
    volumeMounts:
    - name: dockersock
      mountPath: /var/run/docker.sock

  volumes:
  - name: dockersock
    hostPath:
      path: /var/run/docker.sock
"""
    }
  }

  environment {
    DOCKER_IMAGE_NAME       = "react-test-app"
    GITOPS_REPO             = "git@github.com:hrushikeshkothem/cicd-poc.git"
    GITOPS_BRANCH           = "main"
    DEPLOYMENT_MANIFEST_PATH= "argocd/clusters/minikube/apps/nginx-test/test-app/deployment.yaml"
    IMAGE_REPO_PREFIX       = "react-test-app"
    GITOPS_CREDENTIALS_ID   = "jenkins"
  }

  stages {
    stage('Checkout App') {
      steps {
        checkout scm
      }
    }

    stage('Install Dependencies') {
      steps {
        dir('hello-react') {
            container('node') {
                sh 'npm install'
            }
        }
      }
    }

    stage('Lint') {
      steps {
        dir('hello-react') {
            container('node') {
                sh 'npm run lint'
            }
        }
      }
    }

    stage('Test') {
      steps {
        dir('hello-react') {
            container('node') {
                sh 'npm run test'
            }
        }
      }
    }

    stage('Build React App') {
      steps {
        dir('hello-react') {
            container('node') {
                sh 'npm run build'
            }
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        dir('hello-react') {
            script {
               env.TAG       = sh(script: "head /dev/urandom | tr -dc a-z0-9 | head -c8", returnStdout: true).trim()
               env.IMAGE_TAG = "${DOCKER_IMAGE_NAME}:${TAG}"
                echo "Building Docker image with tag: ${IMAGE_TAG}"
            }
            container('docker') {
                sh "docker build -t ${IMAGE_TAG} ."
            }
        }
      }
    }

    stage('Update GitOps Repo with new image tag') {
  steps {
    script {
      // Clean out any previous clone
      sh 'rm -rf gitops-repo'

      // Clone (and set up SSH) via the Git plugin
      dir('gitops-repo') {
       
       checkout scm

        // Patch the manifest
        sh """
          sed -i.bak 's|image: ${IMAGE_REPO_PREFIX}:.*|image: ${IMAGE_TAG}|' ${DEPLOYMENT_MANIFEST_PATH}
        """

        // Commit & push—Git plugin’s SSH setup covers both clone and push
        sh '''
          git config user.email "jenkins@example.com"
          git config user.name  "Jenkins CI"
          git add ${DEPLOYMENT_MANIFEST_PATH}
          git commit -m "ci: update image tag to ${TAG} [skip ci]"
          git push origin ${GITOPS_BRANCH}
        '''
      }
    }
  }
}

  }

  post {
    success {
      echo "Build and deploy pipeline completed successfully with image tag: ${IMAGE_TAG}"
    }
    failure {
      echo "Pipeline failed."
    }
  }
}
