pipeline {
  agent {
    kubernetes {
      cloud 'kubernetes' 
      label 'nodejs-docker'
      defaultContainer 'node'
      yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins-stack
  containers:
  - name: node
    image: node:20-alpine
    command: ['cat']
    tty: true
  - name: docker
    image: docker:20.10.7
    command: ['sleep']
    args: ['infinity']
    tty: true
    securityContext:
      privileged: true
    volumeMounts:
    - name: dockersock
      mountPath: /var/run/docker.sock
  volumes:
  - name: dockersock
    hostPath:
      path: /var/run/docker.sock
"""
    }
  }

  environment {
    DOCKER_IMAGE_NAME       = "react-test-app"
    GITOPS_REPO             = "git@github.com:hrushikeshkothem/cicd-poc.git"
    GITOPS_BRANCH           = "main"
    DEPLOYMENT_MANIFEST_PATH= "argocd/clusters/minikube/apps/nginx-test/test-app/deployment.yaml"
    IMAGE_REPO_PREFIX       = "react-test-app"
    GITOPS_CREDENTIALS_ID   = "test-app-gitops"
  }

  stages {
    stage('Checkout App') {
      steps {
        checkout scm
      }
    }

    stage('Install Dependencies') {
      steps {
        dir('hello-react') {
            container('node') {
                sh 'npm install'
            }
        }
      }
    }

    stage('Lint') {
      steps {
        dir('hello-react') {
            container('node') {
                sh 'npm run lint'
            }
        }
      }
    }

    stage('Test') {
      steps {
        dir('hello-react') {
            container('node') {
                sh 'npm run test'
            }
        }
      }
    }

    stage('Build React App') {
      steps {
        dir('hello-react') {
            container('node') {
                sh 'npm run build'
            }
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        dir('hello-react') {
            script {
               env.TAG       = sh(script: "head /dev/urandom | tr -dc a-z0-9 | head -c8", returnStdout: true).trim()
               env.IMAGE_TAG = "${DOCKER_IMAGE_NAME}:${TAG}"
                echo "Building Docker image with tag: ${IMAGE_TAG}"
            }
            container('docker') {
                sh "docker build -t ${IMAGE_TAG} ."
            }
        }
      }
    }

    stage('Update GitOps Repo with new image tag') {
      steps {
        container('jnlp') {
          sh 'rm -rf gitops-repo'
          dir('gitops-repo') {
            checkout scm
            sh """
              sed -i.bak 's|image: ${IMAGE_REPO_PREFIX}:.*|image: ${IMAGE_TAG}|' ${DEPLOYMENT_MANIFEST_PATH}
            """
            sshagent (credentials: ['gitops']) {
              sh """
                git config user.email 'jenkins@hrushispace.com'
                git config user.name  'Jenkins CI'
                git checkout -B ${GITOPS_BRANCH}
                git add ${DEPLOYMENT_MANIFEST_PATH}
                git commit -m 'ci: update image tag to ${TAG} [skip ci]' || echo 'No changes to commit'
                git push origin ${GITOPS_BRANCH}
              """
            }
          }
        }
      }
    }
  }

  post {
    success {
      echo "Build and deploy pipeline completed successfully with image tag: ${IMAGE_TAG}"
    }
    failure {
      echo "Pipeline failed."
    }
  }
}
